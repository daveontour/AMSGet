# This file contains the data formatting rules to be checked
#
# Any blank line or line starting with a "#" is ignored.
# There is one record per line with 4 fields seperated by a delimiter, of the form:
#
#    BaseDatatype,Relative XPath to the Element of Concern,Regular Expression Defining Format,Error
#
# The seperator between fields can be changed by setting the "delimiter" parameter in the config file.
# This sample file uses '::' as the delimiter between fields. This is so "," can be used in the Regex expressions
#
# The Base Data Types that can be entered must be one of "Airport", "Airline", "Aircraft", "AircraftType"
# Any number of rules, or none, can be entered for each type
#
# The Relative XPath must include the "ams" namespace prefix as shown in the examples below
#
# The Regular Expression is the C# Regex that defines the pattern the element must match. If you are
# not familiar with Regex, then what a great learning opportunity!

Airport::./ams:AirportState/ams:Value[@propertyName='Name']::.+::Airport name does not exist
Airport::./ams:AirportId/ams:AirportCode[@codeContext='IATA']::^[A-Z]{3}$::IATA Airport Code not three letter uppercase
Airport::./ams:AirportId/ams:AirportCode[@codeContext='ICAO']::^[A-Z]{4}$::ICAO Airport Code not four letter uppercase
Airline::./ams:AirlineId/ams:AirlineCode[@codeContext='IATA']::^[A-Z0-9]{2,3}$::IATA Airline Code not two or three charactrs
Aircraft::./ams:AircraftId/ams:Registration::.+::No Registration
AircraftType::./ams:AircraftTypeState/ams:Value[@propertyName='Name']::.+::Aircraft Name not defiend
AircraftType::./ams:AircraftTypeId/ams:AircraftTypeCode[@codeContext='IATA']::.+::Aircraft Type IATA Type Code not defined
AircraftType::./ams:AircraftTypeId/ams:AircraftTypeCode[@codeContext='ICAO']::.+::Aircraft Type ICAO Type Code not defined
AircraftType::./ams:AircraftTypeState/ams:Value[@propertyName='D_Width']::.+::Aircraft Type Width not defined
